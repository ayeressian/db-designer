{"version":3,"sources":["webpack:///./src/renderer/download.js","webpack:///./src/renderer/generation/fromViewToDbSchema.js","webpack:///./src/renderer/menu.js"],"names":["download","data","filename","type","file","Blob","window","navigator","msSaveOrOpenBlob","a","document","createElement","url","URL","createObjectURL","href","body","appendChild","click","setTimeout","removeChild","revokeObjectURL","fromViewToDbSchema","schema","sqlSchema","tables","forEach","table","index","columnSql","columns","column","fk","find","name","_column","uq","nn","pk","length","__webpack_require__","d","__webpack_exports__","setup","config","items","id","title","rightItems","getCurrentSchema","setSchema","menuBarElem","querySelector","fileOpenElem","getElementById","dbSchemaFileOpenElem","chooseDbDialog","Object","fileOpenSetup","getDbType","addEventListener","async","event","detail","confirm","dbType","JSON","stringify","genDbSchemaFromView","open","focus"],"mappings":"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","file":"13.bundle.js","sourcesContent":["// https://stackoverflow.com/a/30832210\nexport function download(data, filename, type) {\n    const file = new Blob([data], {type: type});\n    // IE10+\n    if (window.navigator.msSaveOrOpenBlob) {\n        window.navigator.msSaveOrOpenBlob(file, filename);\n    } else { // Others\n        const a = document.createElement('a');\n        const url = URL.createObjectURL(file);\n        a.href = url;\n        a.download = filename;\n        document.body.appendChild(a);\n        a.click();\n        setTimeout(function() {\n            document.body.removeChild(a);\n            window.URL.revokeObjectURL(url);\n        });\n    }\n}\n\n","export default (schema) => {\n  let sqlSchema = '';\n  schema.tables.forEach((table, index) => {\n    let columnSql = '';\n    table.columns.forEach((column, index) => {\n      if (column.fk) {\n        const table = schema.tables.find((table) => table.name === column.fk.table);\n        const type = table.columns.find((_column) => _column.name === column.fk.column).type;\n        columnSql += '  ' + column.name + ' ' + type;\n      } else {\n        columnSql += '  ' + column.name + ' ' + column.type;\n      }\n      if (column.uq === true) {\n        columnSql += ' UNIQUE';\n      }\n      if (column.nn === true) {\n        columnSql += ' NOT NULL';\n      }\n      if (column.pk === true) {\n        columnSql += ' PRIMARY KEY';\n      }\n      if (column.fk) {\n        columnSql += ' REFERENCES ' + column.fk.table + '(' + column.fk.column + ')';\n      }\n      if (index < table.columns.length -1) {\n        columnSql += ',';\n      }\n      columnSql += '\\n';\n    });\n    sqlSchema += 'CREATE TABLE ' + table.name + '(\\n' + columnSql + ');\\n';\n    if (index < schema.tables.length -1) {\n      sqlSchema += '\\n';\n    }\n  });\n\n  return sqlSchema;\n};\n","import {\n  download\n} from './download.js';\nimport {setupOpenSchema, setupDbScehmaFileOpen} from './fileOpenSetup.js';\nimport fromViewToDbSchema from './generation/fromViewToDbSchema.js';\n\nconst config = {\n  items: [{\n      id: 'file',\n      title: 'File',\n      items: [{\n          id: 'new',\n          title: 'New Schema'\n        },\n        {\n          id: 'open',\n          title: 'Open Schema'\n        },\n        {\n          id: 'downloadSchema',\n          title: 'Download'\n        }\n      ]\n    }, {\n      title: 'import/export',\n      items: [{\n        id: 'exportSql',\n        title: 'Export SQL'\n      }, {\n        id: 'importSql',\n        title: 'Import SQL'\n      }]\n    },\n    {\n      id: 'help',\n      title: 'Help',\n      items: [{\n        id: 'reportIssue',\n        title: 'Report an issue'\n      }, {\n        id: 'about',\n        title: 'About'\n      }]\n    }\n  ],\n  rightItems: [{\n      id: 'gitHub',\n      title: 'GitHub'\n    },\n    {\n      id: 'downloadApp',\n      title: 'Download'\n    }\n  ]\n};\n\nexport default function setup(getCurrentSchema, setSchema) {\n  const menuBarElem = document.querySelector('menu-bar');\n  const fileOpenElem = document.getElementById('file_open');\n  const dbSchemaFileOpenElem = document.getElementById('db_schema_file_open');\n  const chooseDbDialog = document.querySelector('choose-db-dialog');\n\n  setupOpenSchema(fileOpenElem, setSchema);\n  setupDbScehmaFileOpen(dbSchemaFileOpenElem, setSchema, () => chooseDbDialog.getDbType());\n\n  const genDbSchemaFromView = () => {\n    const schema = getCurrentSchema();\n    const result = fromViewToDbSchema(schema, schema.dbType);\n    download(result, 'schema.sql', 'text/plain');\n  };\n\n  menuBarElem.addEventListener('select', async (event) => {\n    switch (event.detail) {\n      case 'new':\n        if (getCurrentSchema().tables.length > 0) {\n          if (window.confirm('Do you want to create a new schema? All the unsaved progress will be lost.')) {\n            const chooseDbDialog = document.querySelector('choose-db-dialog');\n            const dbType = await chooseDbDialog.getDbType();\n            if (dbType != null) {\n              setSchema({tables: [], dbType});\n            }\n          }\n        }\n        break;\n      case 'open':\n        fileOpenElem.click();\n        break;\n      case 'downloadSchema':\n        download(JSON.stringify(getCurrentSchema()), 'schema.json', 'application/json');\n        break;\n      case 'exportSql':\n        genDbSchemaFromView();\n        break;\n      case 'importSql':\n        dbSchemaFileOpenElem.click();\n        break;\n      case 'gitHub':\n        {\n          const win = window.open('https://github.com/ayeressian/dbgrapher', '_blank');\n          win.focus();\n        }\n        break;\n      case 'reportIssue':\n        {\n          const win = window.open('https://github.com/ayeressian/dbgrapher/issues', '_blank');\n          win.focus();\n        }\n        break;\n      case 'downloadApp':\n        break;\n    }\n  });\n\n  menuBarElem.config = config;\n}\n"],"sourceRoot":""}